import React, { useState, useEffect, useRef } from 'react';
import './css/Prompting.css';
import axios from 'axios';

function Prompting() {
    // State to hold the conversation messages
    const [messages, setMessages] = useState([]);
    // State to hold the user's current input question
    const [question, setQuestion] = useState('');
    // State to hold suggestions generated by the LLM
    const [suggestions, setSuggestions] = useState([]);
    // Ref to keep a reference to the chat box for scrolling
    const chatBoxRef = useRef(null);

    // useEffect to initialize the conversation with a welcome message
    useEffect(() => {
        setMessages([{ sender: 'bot', text: 'How can I help you?' }]);
    }, []);

    // useEffect to scroll the chat box to the bottom whenever messages change
    useEffect(() => {
        if (chatBoxRef.current) {
            chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
        }
    }, [messages]);

    // Handle input changes in the question input field
    const handleQuestionChange = (e) => {
        setQuestion(e.target.value);
    };

    // Handle the action of asking a question (triggered by button click or enter key)
    const handleAskQuestion = async () => {
        if (question.trim() === '') return; // Do nothing if the question is empty

        // Add the user's question to the messages list
        const userMessage = { text: question, sender: 'person' };
        setMessages([...messages, userMessage]);

        try {
            // Send the user's question to the backend LLM API
            const response = await axios.post('http://127.0.0.1:5000/chat', { prompt: question });
            
            // Add the LLM's response to the messages list
            const llmMessage = { text: response.data.answer, sender: 'llm' };
            setMessages(prevMessages => [...prevMessages, llmMessage]);

            // Update the suggestions state with the LLM's generated follow-up questions, limiting to 4 suggestions
            setSuggestions(response.data.suggestions.slice(0, 4) || []);
        } catch (error) {
            // Handle and display any errors that occur during the API request
            console.error('Error fetching response:', error);
            setMessages(prevMessages => [...prevMessages, { text: `Error fetching response: ${error.message}`, sender: 'bot' }]);
        }

        // Clear the input field after sending the question
        setQuestion('');
    };

    // Handle pressing the Enter key to submit the question
    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault(); // Prevent the default form submission behavior
            handleAskQuestion(); // Trigger the ask question function
        }
    };

    // Handle clicking on a suggestion bubble to autofill it into the input box
    const handleSuggestionClick = (suggestion) => {
        setQuestion(suggestion);
    };

    return (
        <div className="prompting-container">
            {/* Chat Box Displaying Messages */}
            <div className="chat-box" ref={chatBoxRef}>
                {messages.map((message, index) => (
                    <div key={index} className={`message ${message.sender}`}>
                        {message.text}
                    </div>
                ))}
            </div>

            {/* Input Box for Typing and Submitting Questions */}
            <div className="input-box">
                <input 
                    type="text" 
                    value={question} 
                    onChange={handleQuestionChange} 
                    onKeyPress={handleKeyPress}
                    placeholder="Ask a question..."
                />
                <button onClick={handleAskQuestion}>Ask</button>
            </div>

            {/* Displaying Suggestion Bubbles if there are any suggestions */}
            {suggestions.length > 0 && (
                <div className="suggestions-container">
                    {suggestions.map((suggestion, index) => (
                        <div 
                            key={index} 
                            className="suggestion-bubble" 
                            onClick={() => handleSuggestionClick(suggestion)}
                        >
                            {suggestion}
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
}

export default Prompting;
